// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250714152149_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.GeoImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AcquisitionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("acquisitiondate");

                    b.Property<float>("CloudCover")
                        .HasColumnType("real")
                        .HasColumnName("cloudcover");

                    b.Property<string>("EntityId")
                        .HasColumnType("text")
                        .HasColumnName("entityid");

                    b.Property<Geometry>("Footprint")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("footprint");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text")
                        .HasColumnName("imagepath");

                    b.Property<double>("MaxLat")
                        .HasColumnType("double precision")
                        .HasColumnName("max_lat");

                    b.Property<double>("MaxLon")
                        .HasColumnType("double precision")
                        .HasColumnName("max_lon");

                    b.Property<double>("MinLat")
                        .HasColumnType("double precision")
                        .HasColumnName("min_lat");

                    b.Property<double>("MinLon")
                        .HasColumnType("double precision")
                        .HasColumnName("min_lon");

                    b.Property<int>("Path")
                        .HasColumnType("integer")
                        .HasColumnName("path");

                    b.Property<string>("Pr")
                        .HasColumnType("text")
                        .HasColumnName("pr");

                    b.Property<string>("ProcessingLevel")
                        .HasColumnType("text")
                        .HasColumnName("processinglevel");

                    b.Property<string>("ProductId")
                        .HasColumnType("text")
                        .HasColumnName("productid");

                    b.Property<int>("Row")
                        .HasColumnType("integer")
                        .HasColumnName("row");

                    b.Property<string>("Tipo")
                        .HasColumnType("text")
                        .HasColumnName("tipo");

                    b.HasKey("Id");

                    b.ToTable("geo_images", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
